import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchUserDetails, submitUserDetails } from './appointmentAPI';

const initialState = {
  userDetails : {
    firstName: '',
    lastName: '',
    email: ''
  },
  submitDetails : {
    status: ''
  }
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const userDetailsAsync = createAsyncThunk(
  'appointment/fetchUserDetails',
  async () => {
    const response = await fetchUserDetails();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const submitDetails = createAsyncThunk(
  'appointment/submitUserDetails',
  async (body) => {
    const response = await submitUserDetails(body);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const appointmentSlice = createSlice({
  name: 'appointment',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(userDetailsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(userDetailsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.userDetails = action.payload;
      })
      .addCase(submitDetails.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(submitDetails.fulfilled, (state, action) => {
        state.status = 'idle';
        state.submitDetails = action.payload;
      });
  },
});

 // eslint-disable-next-line 
export const { } = appointmentSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUserDetails = (state) => {
  return state.appointment.userDetails
};

export const selectSubmitDetails = (state) => {
  return state.appointment.submitDetails
}

export default appointmentSlice.reducer;
